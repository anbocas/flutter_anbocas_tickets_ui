name: anbocas_tickets_ui
description: Anbocas Tickets UI Plugin offers a comprehensive pre-built UI
  toolkit for seamless integration of ticket purchasing, check-ins, and event
  management workflows into your application. Easily enhance your platform with
  our ready-to-use components designed for a smooth user experience.
version: 0.0.1
homepage: https://anbocas.com
documentation: https://anbocas.com
repository: https://github.com/anbocas/flutter_anbocas_tickets_ui

environment:
  sdk: ">=3.1.5 <4.0.0"
  flutter: ">=3.3.0"

dependencies:
  # anbocas_tickets_api: ^0.0.1
  anbocas_tickets_api:
    git:
      url: https://github.com/anbocas/anbocas_tickets_api
      ref: dev_saurabh
  country_code_picker: ^3.0.0
  dio: ^5.4.3+1
  eventify: ^1.0.1
  flutter:
    sdk: flutter
  flutter_widget_from_html: ^0.15.0
  intl: ^0.19.0
  mobile_scanner: ^5.2.2
  qr_flutter: ^4.1.0
  quill_html_editor: ^2.2.8
  razorpay_flutter: ^1.3.6
  webview_flutter: ^4.5.0
  qr_scanner_overlay: ^0.0.2

dev_dependencies:
  flutter_lints: ^2.0.0
  flutter_test:
    sdk: flutter

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec
# The following section is specific to Flutter packages.
flutter:
  assets:
    - packages/anbocas_tickets_ui/assets/check.png
# This section identifies this Flutter project as a plugin project.
# The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
# which should be registered in the plugin registry. This is required for
# using method channels.
# The Android 'package' specifies package in which the registered class is.
# This is required for using method channels on Android.
# The 'ffiPlugin' specifies that native code should be built and bundled.
# This is required for using `dart:ffi`.
# All these are used by the tooling to maintain consistency when
# adding or updating assets for this project.
# plugin:
#   platforms:
#     # This plugin project was generated without specifying any
#     # platforms with the `--platform` argument. If you see the `some_platform` map below, remove it and
#     # then add platforms following the instruction here:
#     # https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin-platforms
#     # -------------------
#     some_platform:
#       pluginClass: somePluginClass
# -------------------
# To add assets to your plugin package, add an assets section, like this:
#
# For details regarding assets in packages, see
# https://flutter.dev/assets-and-images/#from-packages
#
# An image asset can refer to one or more resolution-specific "variants", see
# https://flutter.dev/assets-and-images/#resolution-aware
# To add custom fonts to your plugin package, add a fonts section here,
# in this "flutter" section. Each entry in this list should have a
# "family" key with the font family name, and a "fonts" key with a
# list giving the asset and other descriptors for the font. For
# example:
# fonts:
#   - family: Schyler
#     fonts:
#       - asset: fonts/Schyler-Regular.ttf
#       - asset: fonts/Schyler-Italic.ttf
#         style: italic
#   - family: Trajan Pro
#     fonts:
#       - asset: fonts/TrajanPro.ttf
#       - asset: fonts/TrajanPro_Bold.ttf
#         weight: 700
#
# For details regarding fonts in packages, see
# https://flutter.dev/custom-fonts/#from-packages
